# このプロジェクトの目標

主にWebアプリケーションをブラウザからテストするためのシナリオを管理するソフトウェアを開発します。

# 全体のガイドライン

- 返答は日本語を原則とします

# Djangoアプリケーション実装におけるガイドライン

## 実装時の注意

- `uv` を使用すること。例えばDjangoの`manage.py`を呼び出す場合には`uv run manage.py`という形式で実行する
- .env には触れないこと
- test_manager/ に対して black を実行してコードフォーマットを整形する

## テスト

- 新機能を実装した際には関連するユニットテストを実装する
- `uv run pytest`を使用してテストを行う。
- 全てのユニットテストを対象にした際のカバレッジをおおよそ80%以上とする

# MCPサーバ実装におけるガイドライン

まずMCP (Model Context Protocol) とは下記に示されるプロトコルを言う
https://modelcontextprotocol.io/introduction

- MCPサーバの実装は `mcp_server.py` に1ファイルで実装し、Djangoバックエンドとは切り離されたプロセスで実行する
- MCPサーバからはDjangoの関連するPythonモジュールは参照しない。API呼び出しのみで情報を取得する
- MCPサーバはHTTPを介したJSON APIでバックエンドと通信して、それをMCPサーバの返答に加工する役割を負う
- 検証時にはすでに `uv run manage.py runserver` 等を経由して起動したDjangoバックエンドがあることを仮定する
- 実装時にDjangoバックエンドがないとわかったときAIは自分でバックエンドを立てるのではなくユーザにバックエンドの状況を確認すること
- もしDjangoバックエンドと通信出来ない場合、MCPバックエンドとしては通信できないことをクライアントに伝える役割も負う
- Djangoバックエンドと通信する際に必要なAPIトークンはMCP_API_TOKEN環境変数から動的に得る。通常、.envに保存されている